# Author: Lucas Gabriel
#
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6

import sys
import tkinter as tk
import tkinter.ttk as ttk
from generate_new_RSA_keys import generate_new_keys
import criptography_RSA

# standard file name for the keys
public_key_file_name = 'chave_publica.pem'
private_key_file_name = 'chave_privada.pem'

# standard name for the messages save files
encrypted_message_save_file = 'texto_criptografado.encrypt'
decrypted_message_save_file = 'texto_descriptografado.txt'

def vp_start_gui():
    '''Starting point when module is the main routine.'''

    global val, w, root
    root = tk.Tk()
    top = Toplevel1(root)
    root.mainloop()


w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''

    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
            top is the toplevel containing window.'''

        _bgcolor = '#d9d9d9'  # 'gray85'
        _fgcolor = '#000000'  # 'black'
        _compcolor = '#d9d9d9'  # 'gray85'
        _ana1color = '#d9d9d9'  # 'gray85'
        _ana2color = '#ececec'  # 'gray92'
        font9 = '-family {Segoe UI} -size 9 -weight bold -slant roman ' \
                '-underline 0 -overstrike 0'
        self.style = ttk.Style()

        if sys.platform == 'win32':
            self.style.theme_use('winnative')

        self.style.configure('.', background = _bgcolor)
        self.style.configure('.', foreground = _fgcolor)
        self.style.configure('.', font = 'TkDefaultFont')
        self.style.map('.', background = [('selected', _compcolor), ('active', _ana2color)])

        # main window settings
        top.geometry('720x443+279+123')
        top.title('APS - Criptografia em RSA')
        top.configure(background = '#444444')
        top.configure(highlightbackground = '#d9d9d9')
        top.configure(highlightcolor = 'black')

        # notebook settings (Criptografar / Chaves)
        self.style.configure('TNotebook.Tab', background = _bgcolor)
        self.style.configure('TNotebook.Tab', foreground = _fgcolor)
        self.style.map('TNotebook.Tab', background = [('selected', _compcolor), ('active', _ana2color)])
        self.TNotebook = ttk.Notebook(top)
        self.TNotebook.place(relx = 0.0, rely = 0.0, relheight = 1.007, relwidth = 1.006)
        self.TNotebook.configure(takefocus = '')
        self.TNotebook_t0 = tk.Frame(self.TNotebook)
        self.TNotebook.add(self.TNotebook_t0, padding = 3)
        self.TNotebook.tab(0, text = 'Criptografia', compound = 'left', underline = '-1',)
        self.TNotebook_t0.configure(background = '#d9d9d9')
        self.TNotebook_t0.configure(highlightbackground = '#d8d8d8')
        self.TNotebook_t0.configure(highlightcolor = 'black')
        self.TNotebook_t1 = tk.Frame(self.TNotebook)
        self.TNotebook.add(self.TNotebook_t1, padding=3)
        self.TNotebook.tab(1, text = 'Chaves', compound = 'left', underline = '-1', )
        self.TNotebook_t1.configure(background = '#d9d9d9')
        self.TNotebook_t1.configure(highlightbackground = '#d9d9d9')
        self.TNotebook_t1.configure(highlightcolor = 'black')

        self.TFrameEncrypt = ttk.Frame(self.TNotebook_t0)
        self.TFrameEncrypt.place(relx = 0.014, rely = 0.036, relheight = 0.419, relwidth = 0.94)
        self.TFrameEncrypt.configure(relief = 'groove')
        self.TFrameEncrypt.configure(borderwidth = '2')
        self.TFrameEncrypt.configure(relief = 'groove')

        def button_encrypt_click():
            ''' function activated when the encrypt button is pressed '''

            # get the message to encrypt
            message = str(self.ScrolledentryEncrypt.get())
            
            # get the name of the file where the message will be saved
            encrypted_message_save_file = str(self.EntryEncryptedFileName.get())

            # clear the response window
            self.TextResponseText.delete('1.0', tk.END)

            try:
                # encrypt the message, get the encrypt message
                encrypted_message = criptography_RSA.encrypt_text(message, public_key_file_name, encrypted_message_save_file)
                
                # format the success exit message
                response_message = f'Texto criptografado com sucesso. Salvo no arquivo "{encrypted_message_save_file}".\nTexto criptografado = {str(encrypted_message)}'
          
            except Exception as error:
                response_message = error
            
            # enable the response window to set the messages, after that disable it
            self.TextResponseText.configure(state = 'normal')
            self.TextResponseText.delete('1.0', tk.END)
            self.TextResponseText.insert('1.0', response_message)
            self.TextResponseText.configure(state = 'disabled')


        def button_decrypt_click():
            ''' function activated when the decrypt button is pressed '''

            # clear the decrypt response area
            self.ScrolledtextDecrypt.delete('1.0', tk.END)

            # get the name of the file where the encrypt message is
            encrypted_file = str(self.EntryEncryptedFileName.get())

            # get the name of the file where the message will be saved
            decrypted_message_save_file = str(self.EntryNormalMessageFileName.get())

            try:
                # decrypt the message, get the decrypt message
                decrypted_message = criptography_RSA.decrypt_text(encrypted_file, private_key_file_name, decrypted_message_save_file)

                # format the success exit message
                response_message = f'Texto descriptografado apartir do arquivo "{encrypted_file}"\nTexto descriptografado salvo no arquivo "{decrypted_message_save_file}".\nTexto descriptografado = {decrypted_message}'
            
            except Exception as error:
                response_message = error            

            # print the response
            self.ScrolledtextDecrypt.insert('1.0', response_message)


        # encrypt button settings
        self.ButtonEncrypt = tk.Button(self.TFrameEncrypt)
        self.ButtonEncrypt.place(relx = 0.015, rely = 0.057, height = 44, width = 137)
        self.ButtonEncrypt.configure(activebackground = '#ececec')
        self.ButtonEncrypt.configure(activeforeground = '#000000')
        self.ButtonEncrypt.configure(background = '#00b783')
        self.ButtonEncrypt.configure(disabledforeground = '#a3a3a3')
        self.ButtonEncrypt.configure(font = '-family {Segoe UI} -size 9 -weight bold')
        self.ButtonEncrypt.configure(foreground = '#000000')
        self.ButtonEncrypt.configure(highlightbackground = '#d9d9d9')
        self.ButtonEncrypt.configure(highlightcolor = 'black')
        self.ButtonEncrypt.configure(pady = '0')
        self.ButtonEncrypt.configure(text = 'Criptografar')
        self.ButtonEncrypt.configure(command = button_encrypt_click)

        # encrypt text entry area settings
        self.ScrolledentryEncrypt = ScrolledEntry(self.TFrameEncrypt)
        self.ScrolledentryEncrypt.place(relx = 0.237, rely = 0.286, height = 56, relwidth = 0.747)
        self.ScrolledentryEncrypt.configure(background = 'white')
        self.ScrolledentryEncrypt.configure(disabledforeground = '#a3a3a3')
        self.ScrolledentryEncrypt.configure(foreground = 'black')
        self.ScrolledentryEncrypt.configure(highlightbackground = '#d9d9d9')
        self.ScrolledentryEncrypt.configure(highlightcolor = 'black')
        self.ScrolledentryEncrypt.configure(insertbackground = 'black')
        self.ScrolledentryEncrypt.configure(insertborderwidth = '1')
        self.ScrolledentryEncrypt.configure(selectbackground = '#c4c4c4')
        self.ScrolledentryEncrypt.configure(selectforeground = 'black')

        # encrypt message file name info label
        self.LabelEncryptedFileName = tk.Label(self.TFrameEncrypt)
        self.LabelEncryptedFileName.place(relx = 0.244, rely = 0.057, height = 21, width = 185)
        self.LabelEncryptedFileName.configure(activebackground = '#f9f9f9')
        self.LabelEncryptedFileName.configure(activeforeground = 'black')
        self.LabelEncryptedFileName.configure(background = '#d9d9d9')
        self.LabelEncryptedFileName.configure(disabledforeground = '#a3a3a3')
        self.LabelEncryptedFileName.configure(font = '-family {Segoe UI} -size 9 -weight bold')
        self.LabelEncryptedFileName.configure(foreground = '#000000')
        self.LabelEncryptedFileName.configure(highlightbackground = '#d9d9d9')
        self.LabelEncryptedFileName.configure(highlightcolor = 'black')
        self.LabelEncryptedFileName.configure(text = 'Nome do arquivo criptografado:')

        # encrypt message text entry settings
        self.EntryEncryptedFileName = tk.Entry(self.TFrameEncrypt)
        self.EntryEncryptedFileName.place(relx = 0.525, rely = 0.057, height = 20, relwidth = 0.457)
        self.EntryEncryptedFileName.configure(background = 'white')
        self.EntryEncryptedFileName.configure(disabledforeground = '#a3a3a3')
        self.EntryEncryptedFileName.configure(font = 'TkFixedFont')
        self.EntryEncryptedFileName.configure(foreground = '#000000')
        self.EntryEncryptedFileName.configure(highlightbackground = '#d9d9d9')
        self.EntryEncryptedFileName.configure(highlightcolor = 'black')
        self.EntryEncryptedFileName.configure(insertbackground = 'black')
        self.EntryEncryptedFileName.configure(selectbackground = '#c4c4c4')
        self.EntryEncryptedFileName.configure(selectforeground = 'black')
        self.EntryEncryptedFileName.insert(tk.INSERT, encrypted_message_save_file)

        # response area text label settings
        self.LabelResponseText = tk.Label(self.TFrameEncrypt)
        self.LabelResponseText.place(relx = 0.0, rely = 0.629, height = 61, width = 134)
        self.LabelResponseText.configure(background = '#d9d9d9')
        self.LabelResponseText.configure(disabledforeground = '#a3a3a3')
        self.LabelResponseText.configure(font = font9)
        self.LabelResponseText.configure(foreground = '#000000')
        self.LabelResponseText.configure(text = 'Resultado:')

        # response area settings
        self.TextResponseText = tk.Text(self.TFrameEncrypt)
        self.TextResponseText.place(relx = 0.237, rely = 0.686, relheight = 0.251, relwidth = 0.747)
        self.TextResponseText.configure(background = 'white')
        self.TextResponseText.configure(font = 'TkTextFont')
        self.TextResponseText.configure(foreground = 'black')
        self.TextResponseText.configure(highlightbackground = '#d9d9d9')
        self.TextResponseText.configure(highlightcolor = 'black')
        self.TextResponseText.configure(insertbackground = 'black')
        self.TextResponseText.configure(selectbackground = '#c4c4c4')
        self.TextResponseText.configure(selectforeground = 'black')
        self.TextResponseText.configure(wrap = 'word')
        self.TextResponseText.configure(state = 'disabled')

        # decrypt frame settings
        self.TFrameDecrypt = ttk.Frame(self.TNotebook_t0)
        self.TFrameDecrypt.place(relx = 0.014, rely = 0.478, relheight = 0.443, relwidth = 0.94)
        self.TFrameDecrypt.configure(relief = 'groove')
        self.TFrameDecrypt.configure(borderwidth = '2')
        self.TFrameDecrypt.configure(relief = 'groove')

        # decrypt button settings
        self.ButtonDecrypt = tk.Button(self.TFrameDecrypt)
        self.ButtonDecrypt.place(relx = 0.015, rely = 0.054, height = 44, width = 137)
        self.ButtonDecrypt.configure(activebackground = '#ececec')
        self.ButtonDecrypt.configure(activeforeground = '#000000')
        self.ButtonDecrypt.configure(background = '#00b783')
        self.ButtonDecrypt.configure(disabledforeground = '#a3a3a3')
        self.ButtonDecrypt.configure(font = '-family {Segoe UI} -size 9 -weight bold')
        self.ButtonDecrypt.configure(foreground = '#000000')
        self.ButtonDecrypt.configure(highlightbackground = '#d9d9d9')
        self.ButtonDecrypt.configure(highlightcolor = 'black')
        self.ButtonDecrypt.configure(pady = '0')
        self.ButtonDecrypt.configure(text = 'Descriptografar')
        self.ButtonDecrypt.configure(command = button_decrypt_click)

        # decrypted file name label settings
        self.TLabelNormalMessageFileName = ttk.Label(self.TFrameDecrypt)
        self.TLabelNormalMessageFileName.place(relx = 0.244, rely = 0.027, height = 29, width = 176)
        self.TLabelNormalMessageFileName.configure(background = '#d9d9d9')
        self.TLabelNormalMessageFileName.configure(foreground = '#000000')
        self.TLabelNormalMessageFileName.configure(font = '-family {Segoe UI} -size 9 -weight bold')
        self.TLabelNormalMessageFileName.configure(relief = 'flat')
        self.TLabelNormalMessageFileName.configure(text = 'Nome do arquivo normal:')

        # decrypted file name entry settings
        self.EntryNormalMessageFileName = tk.Entry(self.TFrameDecrypt)
        self.EntryNormalMessageFileName.place(relx = 0.467, rely = 0.054, height = 20, relwidth = 0.51)
        self.EntryNormalMessageFileName.configure(background = 'white')
        self.EntryNormalMessageFileName.configure(disabledforeground = '#a3a3a3')
        self.EntryNormalMessageFileName.configure(font = 'TkFixedFont')
        self.EntryNormalMessageFileName.configure(foreground = '#000000')
        self.EntryNormalMessageFileName.configure(highlightbackground = '#d9d9d9')
        self.EntryNormalMessageFileName.configure(highlightcolor = 'black')
        self.EntryNormalMessageFileName.configure(insertbackground = 'black')
        self.EntryNormalMessageFileName.configure(selectbackground = '#c4c4c4')
        self.EntryNormalMessageFileName.configure(selectforeground = 'black')
        self.EntryNormalMessageFileName.insert(tk.INSERT, decrypted_message_save_file)

        # decrypt response area settings
        self.ScrolledtextDecrypt = ScrolledText(self.TFrameDecrypt)
        self.ScrolledtextDecrypt.place(relx = 0.237, rely = 0.324, relheight = 0.6, relwidth = 0.742)
        self.ScrolledtextDecrypt.configure(background = 'white')
        self.ScrolledtextDecrypt.configure(font = 'TkTextFont')
        self.ScrolledtextDecrypt.configure(foreground = 'black')
        self.ScrolledtextDecrypt.configure(highlightbackground = '#d9d9d9')
        self.ScrolledtextDecrypt.configure(highlightcolor = 'black')
        self.ScrolledtextDecrypt.configure(insertbackground = 'black')
        self.ScrolledtextDecrypt.configure(insertborderwidth = '3')
        self.ScrolledtextDecrypt.configure(selectbackground = '#c4c4c4')
        self.ScrolledtextDecrypt.configure(selectforeground = 'black')
        self.ScrolledtextDecrypt.configure(wrap = 'none')

        # keys frame settings
        self.FrameKeys = tk.Frame(self.TNotebook_t1)
        self.FrameKeys.place(relx = 0.014, rely = 0.024, relheight = 0.801, relwidth = 0.968)
        self.FrameKeys.configure(relief = 'groove')
        self.FrameKeys.configure(borderwidth = '2')
        self.FrameKeys.configure(relief = 'groove')
        self.FrameKeys.configure(background = '#d9d9d9')
        self.FrameKeys.configure(highlightbackground = '#d9d9d9')
        self.FrameKeys.configure(highlightcolor = 'black')

        try:
            # read the public key file content
            with open(public_key_file_name, 'rb') as file:
                public_keys = file.read().split()

            # formats the output text of the public key for better viewing
            public_keys = f'Chave E = {int(public_keys[0])}\n\nChave N = {int(public_keys[1])}'
        
        except IOError:
            public_keys = 'Arquivo contendo as chaves publicas não encontrado.'
            
        # public key viewing widget settings
        self.ScrolledtextPublicKeys = ScrolledText(self.FrameKeys)
        self.ScrolledtextPublicKeys.place(relx = 0.022, rely = 0.119, relheight = 0.839, relwidth = 0.447)
        self.ScrolledtextPublicKeys.configure(background = 'white')
        self.ScrolledtextPublicKeys.configure(font = 'TkTextFont')
        self.ScrolledtextPublicKeys.configure(foreground = 'black')
        self.ScrolledtextPublicKeys.configure(highlightbackground = '#d9d9d9')
        self.ScrolledtextPublicKeys.configure(highlightcolor = 'black')
        self.ScrolledtextPublicKeys.configure(insertbackground = 'black')
        self.ScrolledtextPublicKeys.configure(insertborderwidth = '3')
        self.ScrolledtextPublicKeys.configure(selectbackground = '#c4c4c4')
        self.ScrolledtextPublicKeys.configure(selectforeground = 'black')
        self.ScrolledtextPublicKeys.configure(wrap = 'none')
        self.ScrolledtextPublicKeys.insert(tk.INSERT, public_keys)
        self.ScrolledtextPublicKeys.configure(state = 'disabled')

        # public key viewing info label settings
        self.TLabelPublicKeys = ttk.Label(self.FrameKeys)
        self.TLabelPublicKeys.place(relx = 0.022, rely = 0.03, height = 19, width = 306)
        self.TLabelPublicKeys.configure(background = '#d9d9d9')
        self.TLabelPublicKeys.configure(foreground = '#000000')
        self.TLabelPublicKeys.configure(font = '-family {Segoe UI} -size 9 -weight bold')
        self.TLabelPublicKeys.configure(relief = 'flat')
        self.TLabelPublicKeys.configure(text = 'Chaves Publicas:')

        try:
            # read the private key file content
            with open(private_key_file_name, 'rb') as file:
                private_keys = file.read().split()

            # formats the output text of the private key for better viewing
            private_keys = f'Chave D = {int(private_keys[0])}\n\nChave N = {int(private_keys[1])}'

        except IOError:
            private_keys = 'Arquivo contendo as chaves privadas não encontrado.'

        # private key viewing widget settings
        self.ScrolledtextPrivateKey = ScrolledText(self.FrameKeys)
        self.ScrolledtextPrivateKey.place(relx = 0.496, rely = 0.119, relheight = 0.839, relwidth = 0.476)
        self.ScrolledtextPrivateKey.configure(background = 'white')
        self.ScrolledtextPrivateKey.configure(font = 'TkTextFont')
        self.ScrolledtextPrivateKey.configure(foreground = 'black')
        self.ScrolledtextPrivateKey.configure(highlightbackground = '#d9d9d9')
        self.ScrolledtextPrivateKey.configure(highlightcolor = 'black')
        self.ScrolledtextPrivateKey.configure(insertbackground = 'black')
        self.ScrolledtextPrivateKey.configure(insertborderwidth = '3')
        self.ScrolledtextPrivateKey.configure(selectbackground = '#c4c4c4')
        self.ScrolledtextPrivateKey.configure(selectforeground = 'black')
        self.ScrolledtextPrivateKey.configure(wrap = 'none')
        self.ScrolledtextPrivateKey.insert(tk.INSERT, private_keys)
        self.ScrolledtextPrivateKey.configure(state = 'disabled')

        # private key viewing info label settings
        self.TLabelPrivateKey = ttk.Label(self.FrameKeys)
        self.TLabelPrivateKey.place(relx = 0.49511, rely = 0.03, height = 19, width = 316)
        self.TLabelPrivateKey.configure(background = '#d9d9d9')
        self.TLabelPrivateKey.configure(foreground = '#000000')
        self.TLabelPrivateKey.configure(font = '-family {Segoe UI} -size 9 -weight bold')
        self.TLabelPrivateKey.configure(relief = 'flat')
        self.TLabelPrivateKey.configure(text = 'Chaves Privadas:')

        def button_generate_new_keys_click():
            ''' function to generate new random keys
                activated when the generate new keys button is pressed '''

            generate_new_keys()

            # read public key file
            with open(public_key_file_name, 'rb') as file:
                public_keys = file.read().split()

            # formats the output text of the public key for better viewing
            public_keys = f'Chave E = {int(public_keys[0])}\n\nChave N = {int(public_keys[1])}'

            # enable the window to set the key, after that disable it
            self.ScrolledtextPublicKeys.configure(state = 'normal')
            self.ScrolledtextPublicKeys.delete('1.0', tk.END)
            self.ScrolledtextPublicKeys.insert(tk.INSERT, public_keys)
            self.ScrolledtextPublicKeys.configure(state = 'disabled')

            # read private key file
            with open(private_key_file_name, 'rb') as file:
                private_keys = file.read().split()

            # formats the output text of the private key for better viewing
            private_keys = f'Chave D = {int(private_keys[0])}\n\nChave N = {int(private_keys[1])}'

            # enable the window to set the key, after that disable it
            self.ScrolledtextPrivateKey.configure(state = 'normal')
            self.ScrolledtextPrivateKey.delete('1.0', tk.END)
            self.ScrolledtextPrivateKey.insert(tk.INSERT, private_keys)
            self.ScrolledtextPrivateKey.configure(state = 'disabled')

        # generate new keys button settings
        self.ButtonGenerateNewKeys = tk.Button(self.TNotebook_t1)
        self.ButtonGenerateNewKeys.place(relx = 0.014, rely = 0.861, height = 34, width = 127)
        self.ButtonGenerateNewKeys.configure(activebackground = '#ececec')
        self.ButtonGenerateNewKeys.configure(activeforeground = '#000000')
        self.ButtonGenerateNewKeys.configure(background = '#DB4A39')
        self.ButtonGenerateNewKeys.configure(disabledforeground = '#a3a3a3')
        self.ButtonGenerateNewKeys.configure(font = '-family {Segoe UI} -size 9 -weight bold')
        self.ButtonGenerateNewKeys.configure(foreground = '#000000')
        self.ButtonGenerateNewKeys.configure(highlightbackground = '#d9d9d9')
        self.ButtonGenerateNewKeys.configure(highlightcolor = 'black')
        self.ButtonGenerateNewKeys.configure(pady = '0')
        self.ButtonGenerateNewKeys.configure(text = 'Gerar Novas Chaves')
        self.ButtonGenerateNewKeys.configure(command = button_generate_new_keys_click)


# the following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    ''' configure the scrollbars for a widget. '''

    def __init__(self, master):
        #  rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical

        try:
            vsb = ttk.Scrollbar(master, orient = 'vertical', command = self.yview)
        except:
            pass

        hsb = ttk.Scrollbar(master, orient = 'horizontal', command = self.xview)

        try:
            self.configure(yscrollcommand = self._autoscroll(vsb))
        except:
            pass

        self.configure(xscrollcommand = self._autoscroll(hsb))

        self.grid(column = 0, row = 0, sticky = 'nsew')

        try:
            vsb.grid(column = 1, row = 0, sticky = 'ns')
        except:
            pass

        hsb.grid(column = 0, row = 1, sticky = 'ew')
        master.grid_columnconfigure(0, weight = 1)
        master.grid_rowconfigure(0, weight = 1)

        # copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))


    @staticmethod
    def _autoscroll(sbar):
        ''' hide and show scrollbar as needed. '''

        def wrapped(first, last):
            first, last = float(first), float(last)
            
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            
            else:
                sbar.grid()
            
            sbar.set(first, last)

        return wrapped


    def __str__(self):
        return str(self.master)


def _create_container(func):
    ''' creates a ttk Frame with a given master, and use this new frame to
        place the scrollbars and the widget. '''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)


    return wrapped


class ScrolledText(AutoScroll, tk.Text):
    '''a standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


class ScrolledEntry(AutoScroll, tk.Entry):
    ''' a standard Tkinter Entry widget with a horizontal scrollbar
    that will automatically show/hide as needed. '''

    @_create_container
    def __init__(self, master, **kw):
        tk.Entry.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform

def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    try:
        if platform.system() == 'Windows':
            widget.yview_scroll(-1 * int(event.delta / 120), 'units')
       
        elif platform.system() == 'Darwin':
            widget.yview_scroll(-1 * int(event.delta), 'units')
       
        else:
            if event.num == 4:
                widget.yview_scroll(-1, 'units')
       
            elif event.num == 5:
                widget.yview_scroll(1, 'units')
    
    except AttributeError:
        pass


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
    
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
